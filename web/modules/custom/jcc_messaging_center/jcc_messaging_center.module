<?php

/**
 * @file
 * Contains jcc_blocks.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Entity\EntityInterface;

use JudicialCouncil\Emma\JccClient;

/**
 * Implements hook_form_alter().
 */
function jcc_messaging_center_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form['#form_id'],
    [
      'node_messaging_news_item_edit_form',
  // 'user_form',
    ]
  )) {
    if ($form['#form_id'] == 'user_form') {
      // kint('user_form');.
    }
    elseif ($form['#form_id'] == 'node_messaging_news_item_edit_form') {
      $form['group_messaging_options']['field_send_email'] = [
        '#type' => 'checkbox',
        '#title' => t('Send an email when saving this news item.'),
        '#default_value' => FALSE,
        '#weight' => 50,
      ];
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'jcc_messaging_center_form_submit';
      }
    }
  }
  elseif ($form['#form_id'] == 'user_register_form') {
    $form['actions']['submit']['#value'] = t('Subscribe');
  }
}

/**
 * Alters for submission - sends query.
 */
function jcc_messaging_center_form_submit($form, FormStateInterface $form_state) {
  if (in_array($form['#form_id'], ['node_messaging_news_item_edit_form'])
    && $form_state->cleanValues()->getValues()['field_send_email'] == 1) {
    global $base_url;
    // dsm('SEND EMAIL');.
  }
  elseif ($form['#form_id'] == 'user_form') {
    $emma_config = \Drupal::config('webform_myemma.settings');
    if (!$emma_config->get('account_id')) {
      return FALSE;
    }

    $emma = new JccClient($emma_config->get('account_id'), $emma_config->get('public_key'), $emma_config->get('private_key'));

    $user_req = $emma->get_member_detail_by_email($form_state->cleanValues()->getValues()['mail']);
    $user_emma_id = $user_req->member_id;
    // Create / Update user.
    $fields = [
      'first_name' => $form_state->cleanValues()->getValues()['name'],
    ];
    $groups = [];
    $groups_to_remove = [];
    foreach ($form_state->cleanValues()->getValues()['myemma_groups'] as $key => $val) {
      if ($val !== 0) {
        $groups[] = $val;
      }
      else {
        $groups_to_remove[] = $key;
      }
    }
    $emma->import_single_member($form_state->cleanValues()->getValues()['mail'], $fields, $groups);
    // Need an extra call to account for groups to remove.
    $emma->remove_member_from_groups($user_emma_id, $groups_to_remove);
  }
}

/**
 * Implements hook_entity_insert().
 */
function jcc_messaging_center_user_insert(EntityInterface $entity) {
  $tempstore = \Drupal::service('tempstore.shared');
  $store = $tempstore->get('jcc_subscriptions');
  $store->set('member_email_' . $entity->get('mail')->value, user_password());
}

/**
 * Implements hook_token_info().
 */
function jcc_messaging_center_token_info() {
  $type = [
    'name' => t('JCC Custom'),
    'description' => t('JCC Custom Tokens.'),
  ];
  $jcc['subscription-mail-access-key'] = [
    'name' => t("Subscription Mail Access Key"),
    'description' => t('Subscription Access Key for Mail'),
  ];

  return [
    'types' => ['jcc' => $type],
    'tokens' => ['jcc' => $jcc],
  ];
}

/**
 * Implements hook_tokens().
 */
function jcc_messaging_center_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'jcc' && !empty($data['user'])) {
    /** @var \Drupal\user\UserInterface $account */
    $account = $data['user'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'subscription-mail-access-key':
          $tempstore = \Drupal::service('tempstore.shared');
          $store = $tempstore->get('jcc_subscriptions');
          $replacements[$original] = $store->get('member_email_' . $account->get('mail')->value);
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_cron().
 */
function jcc_messaging_center_cron() {
  $digest_cron_task = \Drupal::service('jcc_subscriptions.digestcron');
  $digest_cron_task->cron();
}
